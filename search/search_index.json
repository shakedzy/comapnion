{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#companion-generative-ai-powered-foreign-language-private-tutor","title":"Companion: Generative-AI-Powered Foreign-Language Private Tutor","text":"<p>Companion uses OpenAI ChatGPT &amp; Whisper and  Google Text-to-Speech &amp;  Translate to create your own personal private tutor for learning a new foreign language. You can write, talk, read and listen  in both your native language and selected foreign language. It's also configured to correct any mistakes you make.</p> <p>Companion is designed to run both locally and as a cloud service, which allow it be used through mobile devices.  See instruction to launch Companion on GitHub Codespaces in the documentation.</p> <p>Companion is distributed free of charge for any non-commercial usage. Note that the different APIs and services used are not necessarily free, and might charge you based on your usage. </p>"},{"location":"blogposts/","title":"Related Blogposts","text":"<ul> <li>How I Coded My Own Private French Tutor Out of ChatGPT</li> <li>7 Lessons Learned on Creating a Complete Product Using ChatGPT</li> </ul>"},{"location":"codespace/","title":"Use on Mobile via GitHub Codespaces","text":"<p>In order to use Companion on your mobile device, you can use GitHub Codespaces as your server. For this, you'll need to have a GitHub account. It is also recommended to first install and launch Companion  locally on your computer, to make sure all required services are configured correctly.</p>"},{"location":"codespace/#setting-up-your-github-codespace","title":"Setting up your GitHub Codespace","text":"<ol> <li>Create a new Codespace</li> <li>Select <code>shakedzy/companion</code> as the repository</li> <li>Select <code>main</code> as the branch</li> <li>You can use the smallest machine (2 cores)</li> <li>Got to your Codespace, and wait for it to finish initialization</li> <li>In the terminal, run: <pre><code>./install_codespace.sh\n</code></pre></li> <li>When the script ends, open a new terminal (from the menu on the left) and run: <pre><code>./install_codespace2.sh\n</code></pre></li> <li>Add your <code>OPENAI_API_KEY</code> as a secret.     Remember to name it <code>OPENAI_API_KEY</code>. This will restart your Codespace.</li> <li>When your Codespace relaunches, run: <pre><code>python companion.py\n</code></pre> You can shut down your Codespace when you're done, and relaunch it when you want to use Companion again. When you relaunch it, all you'll need to run is <code>python companion.py</code>.</li> </ol> <p>Make Port 5000 Public</p> <p>Connection to the service seems to work faster when port 5000 (the one used by this app) is made public. You'll be given the option to do so as soon as the app launches on your Codespace, or you can change the port visibility on the Ports tab. Note this means that anyone with a link to your Codespace will be able to access you running app.</p>"},{"location":"codespace/#using-companion-from-your-mobile","title":"Using Companion From Your Mobile","text":"<ol> <li>Once your Companion is running on your Codespace, got to the Ports tab. You should see port 5000 is open.</li> <li>Copy-paste its URL, and access it from your mobile browser.</li> </ol>"},{"location":"codespace/#mobile-ui","title":"Mobile UI","text":""},{"location":"install/","title":"Installing Dependencies","text":""},{"location":"install/#installing-prerequisites","title":"Installing prerequisites","text":"Mac Linux Windows <pre><code>brew install ffmpeg\n</code></pre> <pre><code>apt-get install ffmpeg libavcodec-extra\n</code></pre> <p>libav.org is down</p> <p>It seems the Windows binaries website is down. If you find an alternative method to install Companion on Windows, please update on the open issue on GitHub.</p> <ol> <li>Download and extract <code>libav</code> from the Windows binaries.</li> <li>Add the <code>libav</code>'s <code>/bin</code> folder to your <code>PATH</code> envvar</li> </ol>"},{"location":"install/#installing-environment","title":"Installing environment","text":"<ol> <li> <p>Create a new virtual environment (optional)</p> </li> <li> <p>Clone the repository, either by downloading the files   from GitHub or by running: <pre><code>git clone https://github.com/shakedzy/companion.git\n</code></pre></p> </li> <li>From the main <code>companion</code> directory, run: <pre><code>pip install -r requirements.txt\n</code></pre></li> </ol>"},{"location":"install/#keys-file","title":"Keys file","text":"<p>This is optional, and not required.</p> <p>You may add a <code>keys.yml</code> file which will hold your OpenAI API configurations and/or a Google Cloud Service Account to be used to access these required services. It allows you to override the local OpenAI API key or Google Cloud SDK (or when they cannot be installed).</p> <p>Private keys</p> <p>Your API and Service Account keys are private and shouldn't be shared, as they allow access your OpenAI and Google Cloud services without any password or additional logins. Do not save or share this file publicly online nor commit it to GitHub. This file should remain only on your machine.</p> <p>Keys file example: <pre><code>openai:\n  api_key: 'sk-...'\n  base_url: '...'\n\ngoogle_sa:\n  ...\n</code></pre></p>"},{"location":"install/#openai","title":"<code>openai</code>","text":"<ul> <li><code>api_key</code>: Use this Open API key instead of the one found in your <code>OPENAI_API_KEY</code> environment variable. You can redirect to another environment variable by using the variable name with a prefix <code>$</code> prefix (i.e. <code>$ANOTHER_SERVICE_API_KEY</code>)</li> <li><code>base_url</code>: Use this URL instead of the default one</li> </ul>"},{"location":"install/#google_sa","title":"<code>google_sa</code>","text":"<p>Insert here all your Google Service Account credentials key-values in order to authenticate with Google Cloud using this Service Account instead of using Google Cloud SDK client. </p> <p>Service Account roles</p> <p>The Service Account used for this app will require the Service Usage Consumer role.</p>"},{"location":"languages/","title":"Supported Languages","text":"<p>Note performance might vary between different languages.</p>"},{"location":"languages/#input-languages","title":"Input Languages","text":"<p>Languages supported by OpenAI Whisper:</p> <p>Afrikaans, Arabic, Armenian, Azerbaijani, Belarusian, Bosnian, Bulgarian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Estonian, Finnish, French, Galician, German, Greek, Hebrew, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Kannada, Kazakh, Korean, Latvian, Lithuanian, Macedonian, Malay, Marathi, Maori, Nepali, Norwegian, Persian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Slovenian, Spanish, Swahili, Swedish, Tagalog, Tamil, Thai, Turkish, Ukrainian, Urdu, Vietnamese, Welsh.</p>"},{"location":"languages/#output-languages","title":"Output Languages","text":"<p>Languages supported by Google Text-to-Speech:</p> <p>Afrikaans (South Africa), Arabic, Basque (Spain), Bengali (India), Bulgarian (Bulgaria), Catalan (Spain), Chinese (Hong Kong), Czech (Czech Republic), Danish (Denmark), Dutch (Belgium), Dutch (Netherlands), English (Australia), English (India), English (UK), English (US), Filipino (Philippines), Finnish (Finland), French (Canada), French (France), Galician (Spain), German (Germany), Greek (Greece), Gujarati (India), Hebrew (Israel), Hindi (India), Hungarian (Hungary), Icelandic (Iceland), Indonesian (Indonesia), Italian (Italy), Japanese (Japan), Kannada (India), Korean (South Korea), Latvian (Latvia), Lithuanian (Lithuania), Malay (Malaysia), Malayalam (India), Mandarin Chinese, Marathi (India), Norwegian (Norway), Polish (Poland), Portuguese (Brazil), Portuguese (Portugal), Punjabi (India), Romanian (Romania), Russian (Russia), Serbian (Cyrillic), Slovak (Slovakia), Spanish (Spain), Spanish (US), Swedish (Sweden), Tamil (India), Telugu (India), Thai (Thailand), Turkish (Turkey), Ukrainian (Ukraine), Vietnamese (Vietnam)</p>"},{"location":"licenses/","title":"Licenses","text":"<ul> <li>Companion is distributed under the Attribution-NonCommercial 4.0 International license.</li> <li>Default user image by Font Awesome Free 5.2.0 by @fontawesome. White background added by me. </li> </ul>"},{"location":"run/","title":"Using Companion","text":""},{"location":"run/#launching","title":"Launching","text":"<p>From the <code>companion</code> directory in your terminal, run: <pre><code>python companion.py\n</code></pre> You may also add: <pre><code>-c CONFIG_FILE  select an alternative configuration file\n-k KEYS_FILE    select a keys file\n</code></pre> Both options are optional.</p> <p>To begin, go to 127.0.0.1:5000 in your browser.  Note: Refreshing the page will restart the chat. </p> <p>Launching for the first time</p> <p>If this is the first time you run the app, you'll need to first configure your tutor. To do so,  click Settings ()  on the top-left corner of the main screen, or go to 127.0.0.1:5000/setup.</p>"},{"location":"run/#user-interface","title":"User Interface","text":"<p>The UI should be quite straightforward, and resemble a standard chat. Here are some additional  useful functionalities available:</p> <ol> <li>Recording: You are able to write to your tutor text messages, but you can also talk. Click the  recording button to begin recording (it will turn red), and once again to stop recording and process it. The language button next to the recording button indicates the language you speak in the recording. Click it to switch between your native language and the one you learn. There's also automatic language recognition option (marked by 'A'), but it is less recommended, as processing might take longer and might be more prone to errors. You can use Alt+R to turn recording on and off, and Alt+L to switch languages.</li> <li>Save &amp; load session: You can save your current session, and easily load it next time you launch the app</li> <li>Translate: Clicking this button will add translation to your tutor messages in your selected native language.</li> <li>Tutor reciting: Clicking this button will play the tutor reciting the text. You can also ask it to recite you messages, to hear how it pronounces it.</li> <li>User recording: If your message is based on recording, clicking this button will play your recording.</li> </ol>"},{"location":"setting_up/","title":"Setting Up Required Services","text":""},{"location":"setting_up/#openai-or-openai-alternative","title":"OpenAI (or OpenAI alternative)","text":"<p>Companion was developed over the OpenAI SDK and tested with OpenAI's GPT models. You can choose to use OpenAI's platform, or any other LLM-service which supports the OpenAI API interface.</p> <p>Note: Companion uses the OpenAI API for both the chat (using ChatGPT) and Speech-to-Text (using Whisper), so any OpenAI alternative will require to support both cases.</p>"},{"location":"setting_up/#openai","title":"OpenAI","text":"<ol> <li>Create an account on OpenAI's website</li> <li>Set up a Paid Account</li> <li>Create an API token</li> <li>Save your token as an environment variable named <code>OPENAI_API_KEY</code>: <pre><code>export OPENAI_API_KEY=\"YOUR_KEY\"\n</code></pre></li> </ol> <p>Using a keys file</p> <p>If you're unable to save your OpenAI API key as a permanent environment variable, you can add it to  a keys file. See Keys file on Installing Dependencies.</p>"},{"location":"setting_up/#openai-alternative","title":"OpenAI Alternative","text":"<p>To use another service instead of OpenAI, a keys file is recommended. Under <code>openai</code>, save the new <code>base_url</code> and <code>api_key</code> to the alternative service.</p>"},{"location":"setting_up/#google-cloud","title":"Google Cloud","text":"<p>Google Text-to-Speech is used to narrate your tutor, and  Google Translate is used to translate your tutor's messages to your own language.</p>"},{"location":"setting_up/#1-setting-up-a-google-cloud-project","title":"1. Setting up a Google Cloud Project","text":"<ol> <li>Go to the Google Cloud Console </li> <li>Click on the project drop-down and then click on the \"New Project\" button </li> <li>In the \"New Project\" dialog, enter a name for your project</li> <li>Click on the \"Create\" button to create the project</li> </ol> <p>Google Cloud project ID</p> <p>The SDK installation process (see below) will require your project ID, and not the name you gave it. You can find your project ID on your Google Cloud Dashboard. Choose your project from the dropdown at the top of the screen, and you'll see your project ID under Project Info.</p>"},{"location":"setting_up/#2-setting-up-google-cloud-sdk","title":"2. Setting up Google Cloud SDK","text":"<ol> <li>Download the Google Cloud SDK client. Follow the installation instructions for your operating system.</li> <li>Create your credential file by running: <pre><code>gcloud auth application-default login\n</code></pre></li> </ol>"},{"location":"setting_up/#3-enable-apis","title":"3. Enable APIs","text":"<p>Check your Google Cloud project</p> <p>When accessing the links below, make sure the project you created is the one appearing on the dropdown box at the top</p> <ol> <li>Enable Google Translate API for your project</li> <li>Enable Google Text-to-Speech API for your project</li> </ol>"}]}